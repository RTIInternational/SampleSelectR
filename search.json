[{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rtiinternational.github.io/SampleSelectR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stephanie Zimmer. Author, maintainer. John David Bunker, Jr.. Author. Thomas Burkett. Author. Philip Lee. Author. Haby Sow. Author. RTI International. Funder.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zimmer S, Bunker, Jr. J, Burkett T, Lee P, Sow H (2025). SampleSelectR: Randomly select samples various probability-based methods. R package version 1.0.0, https://github.com/RTIInternational/SampleSelectR.","code":"@Manual{,   title = {SampleSelectR: Randomly select samples for various probability-based methods},   author = {Stephanie Zimmer and John David {Bunker, Jr.} and Thomas Burkett and Philip Lee and Haby Sow},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/RTIInternational/SampleSelectR}, }"},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"sampleselectr","dir":"","previous_headings":"","what":"Randomly select samples for various probability-based methods","title":"Randomly select samples for various probability-based methods","text":"SampleSelectR R package developed RTI International support design implementation common survey sampling methods. designed make sample design selection reproducible, efficient, transparent survey statisticians researchers. Currently supported sampling methods include: Simple Random Sampling (SRS) Systematic Sampling (sys) Systematic Probability Proportional Size (PPS) Sampling Sequential PPS Sampling (.e., Chromy’s method) Allocation methods include: Proportional Power Neyman Optimal","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Randomly select samples for various probability-based methods","text":"can install development version SampleSelectR GitHub either pak devtools package: , can load package.","code":"# install.packages(\"pak\") pak::pak(\"RTIInternational/SampleSelectR\")  # install.packages(\"devtools\") devtools::install_github(\"RTIInternational/SampleSelectR\") library(SampleSelectR)"},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"included-data","dir":"","previous_headings":"","what":"Included Data","title":"Randomly select samples for various probability-based methods","text":"SampleSelectR comes three example datasets illustration realistic sample frames including: ipeds contains list postsecondary educational institutions United States Integrated Postsecondary Education Data System (IPEDS) select set characteristics operating institutions Fall 20231 county_2023 contains list counties United States based data 2019-2023 American Community Survey select set characteristics2 puma_2023 contains list Public Use Microdata Areas (PUMAs) United States based data 2019-2023 American Community Survey select set characteristics3","code":"summary(ipeds) #>      UNITID          INSTNM             STABBR               FIPS       #>  Min.   :100654   Length:5914        Length:5914        Min.   : 1.00   #>  1st Qu.:169277   Class :character   Class :character   1st Qu.:13.00   #>  Median :219493   Mode  :character   Mode  :character   Median :29.00   #>  Mean   :284664                                         Mean   :29.19   #>  3rd Qu.:446954                                         3rd Qu.:42.00   #>  Max.   :499723                                         Max.   :78.00   #>                                                                         #>                                                         OBEREG     #>  Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV):1467   #>  Mid East (DE, DC, MD, NJ, NY, PA)                         : 971   #>  Far West (AK, CA, HI, NV, OR, WA)                         : 870   #>  Great Lakes (IL, IN, MI, OH, WI)                          : 851   #>  Southwest (AZ, NM, OK, TX)                                : 633   #>  Plains (IA, KS, MN, MO, NE, ND, SD)                       : 468   #>  (Other)                                                   : 654   #>                                 ICLEVEL     #>  Four or more years                 :2747   #>  At least 2 but less than 4 years   :1512   #>  Less than 2 years (below associate):1655   #>                                             #>                                             #>                                             #>                                             #>                                      SECTOR               LOCALE     #>  Private not-for-profit, 4-year or above:1608   Suburb: Large:1442   #>  Private for-profit, less-than 2-year   :1373   City: Large  :1392   #>  Public, 2-year                         : 868   City: Small  : 778   #>  Public, 4-year or above                : 820   City: Midsize: 713   #>  Private for-profit, 2-year             : 517   Town: Distant: 396   #>  Private for-profit, 4-year or above    : 319   Rural: Fringe: 298   #>  (Other)                                : 409   (Other)      : 895   #>                                         DEGGRANT    #>  Degree-granting                            :3995   #>  Nondegree-granting, primarily postsecondary:1919   #>                                                     #>                                                     #>                                                     #>                                                     #>                                                     #>                                      HLOFFER         ENRTOT       #>  At least 1, but less than 2 academic yrs:1514   Min.   :     1   #>  Doctor's degree                         :1232   1st Qu.:   127   #>  Associate's degree                      :1022   Median :   588   #>  Bachelor's degree                       : 677   Mean   :  3332   #>  Master's degree                         : 672   3rd Qu.:  2849   #>  At least 2, but less than 4 academic yrs: 490   Max.   :185015   #>  (Other)                                 : 307                    #>       EFUG              EFUG1ST          EFUGFT           EFGRAD        #>  Min.   :     0.00   Min.   :    0   Min.   :     0   Min.   :    0.0   #>  1st Qu.:    98.25   1st Qu.:   21   1st Qu.:    71   1st Qu.:    0.0   #>  Median :   472.00   Median :  105   Median :   321   Median :    0.0   #>  Mean   :  2777.88   Mean   :  508   Mean   :  1706   Mean   :  553.7   #>  3rd Qu.:  2455.25   3rd Qu.:  478   3rd Qu.:  1426   3rd Qu.:  120.0   #>  Max.   :159653.00   Max.   :15343   Max.   :135822   Max.   :50245.0   #>                                                                         #>     EFGRADFT        #>  Min.   :    0.00   #>  1st Qu.:    0.00   #>  Median :    0.00   #>  Mean   :  328.37   #>  3rd Qu.:   56.75   #>  Max.   :49193.00   #>   summary(county_2023) #>     GEOID               Name              State                 Region     #>  Length:3144        Length:3144        Length:3144        Northeast: 218   #>  Class :character   Class :character   Class :character   Midwest  :1055   #>  Mode  :character   Mode  :character   Mode  :character   South    :1422   #>                                                           West     : 449   #>                                                                            #>                                                                            #>                                                                            #>                Division      Pop_Tot        Pop_Pct_White_NH  Pop_Pct_Black_NH  #>  West North Central:618   Min.   :     43   Min.   :  2.153   Min.   : 0.0000   #>  South Atlantic    :588   1st Qu.:  10794   1st Qu.: 62.608   1st Qu.: 0.6574   #>  West South Central:470   Median :  25813   Median : 81.103   Median : 2.0825   #>  East North Central:437   Mean   : 105721   Mean   : 74.298   Mean   : 8.6559   #>  East South Central:364   3rd Qu.:  68379   3rd Qu.: 90.618   3rd Qu.: 9.5543   #>  Mountain          :281   Max.   :9848406   Max.   :100.000   Max.   :86.0575   #>  (Other)           :386                                                         #>  Pop_Pct_AIAN_NH   Pop_Pct_Asian_NH  Pop_Pct_NHPI_NH     Pop_Pct_Other_NH #>  Min.   : 0.0000   Min.   : 0.0000   Min.   : 0.000000   Min.   : 0.000   #>  1st Qu.: 0.0618   1st Qu.: 0.2780   1st Qu.: 0.000000   1st Qu.: 2.531   #>  Median : 0.1546   Median : 0.6098   Median : 0.005365   Median : 3.478   #>  Mean   : 1.6596   Mean   : 1.4257   Mean   : 0.096733   Mean   : 3.798   #>  3rd Qu.: 0.4637   3rd Qu.: 1.3405   3rd Qu.: 0.059577   3rd Qu.: 4.495   #>  Max.   :91.3520   Max.   :41.9978   Max.   :18.604651   Max.   :25.562   #>                                                                           #>  Pop_Pct_Hispanic     HU_Tot        HU_Pct_Occupied HU_Pct_Vacant    #>  Min.   : 0.000   Min.   :     47   Min.   :22.68   Min.   : 1.707   #>  1st Qu.: 2.533   1st Qu.:   5240   1st Qu.:78.61   1st Qu.: 9.393   #>  Median : 4.881   Median :  12374   Median :85.28   Median :14.721   #>  Mean   :10.066   Mean   :  45271   Mean   :83.10   Mean   :16.904   #>  3rd Qu.:10.809   3rd Qu.:  31710   3rd Qu.:90.61   3rd Qu.:21.388   #>  Max.   :97.306   Max.   :3624084   Max.   :98.29   Max.   :77.316   #>                                                                      #>   Pop_Pct_0004     Pop_Pct_0509     Pop_Pct_1014     Pop_Pct_2544   #>  Min.   : 0.000   Min.   : 0.000   Min.   : 0.000   Min.   : 0.00   #>  1st Qu.: 4.900   1st Qu.: 5.200   1st Qu.: 5.700   1st Qu.:21.90   #>  Median : 5.500   Median : 6.000   Median : 6.400   Median :23.60   #>  Mean   : 5.529   Mean   : 5.997   Mean   : 6.455   Mean   :23.82   #>  3rd Qu.: 6.200   3rd Qu.: 6.700   3rd Qu.: 7.200   3rd Qu.:25.60   #>  Max.   :20.600   Max.   :21.000   Max.   :13.300   Max.   :58.20   #>                                                                     #>   Pop_Pct_4564    Pop_Pct_6574   Pop_Pct_75plus    Pop_Pct_1517    #>  Min.   : 8.90   Min.   : 2.10   Min.   : 0.700   Min.   : 0.000   #>  1st Qu.:24.40   1st Qu.:10.10   1st Qu.: 6.700   1st Qu.: 3.600   #>  Median :26.00   Median :11.60   Median : 8.000   Median : 4.000   #>  Mean   :25.75   Mean   :11.87   Mean   : 8.182   Mean   : 3.955   #>  3rd Qu.:27.40   3rd Qu.:13.10   3rd Qu.: 9.400   3rd Qu.: 4.300   #>  Max.   :46.90   Max.   :38.50   Max.   :46.300   Max.   :17.900   #>                                                                    #>   Pop_Pct_1824    #>  Min.   : 0.000   #>  1st Qu.: 6.900   #>  Median : 7.800   #>  Mean   : 8.453   #>  3rd Qu.: 8.900   #>  Max.   :49.100   #>   summary(puma_2023) #>     GEOID               Name              State                 Region    #>  Length:2462        Length:2462        Length:2462        Northeast:423   #>  Class :character   Class :character   Class :character   Midwest  :506   #>  Mode  :character   Mode  :character   Mode  :character   South    :952   #>                                                           West     :581   #>                                                                           #>                                                                           #>                                                                           #>                Division      Pop_Tot       Pop_Pct_White_NH  Pop_Pct_Black_NH   #>  South Atlantic    :496   Min.   : 94457   Min.   : 0.6772   Min.   : 0.06043   #>  Pacific           :392   1st Qu.:114269   1st Qu.:41.1324   1st Qu.: 2.25999   #>  East North Central:340   Median :128683   Median :62.3550   Median : 5.82201   #>  Middle Atlantic   :313   Mean   :135007   Mean   :58.1157   Mean   :12.06644   #>  West South Central:303   3rd Qu.:151797   3rd Qu.:78.8115   3rd Qu.:15.45296   #>  Mountain          :189   Max.   :254693   Max.   :95.5992   Max.   :91.54119   #>  (Other)           :429                                                         #>  Pop_Pct_AIAN_NH    Pop_Pct_Asian_NH   Pop_Pct_NHPI_NH    Pop_Pct_Other_NH   #>  Min.   : 0.00000   Min.   : 0.03401   Min.   : 0.00000   Min.   : 0.09704   #>  1st Qu.: 0.06733   1st Qu.: 1.11991   1st Qu.: 0.00978   1st Qu.: 3.22126   #>  Median : 0.12409   Median : 2.67222   Median : 0.03879   Median : 4.07446   #>  Mean   : 0.54049   Mean   : 5.75511   Mean   : 0.16905   Mean   : 4.35801   #>  3rd Qu.: 0.25500   3rd Qu.: 6.54233   3rd Qu.: 0.10762   3rd Qu.: 5.11640   #>  Max.   :71.05525   Max.   :69.44064   Max.   :23.33594   Max.   :25.66375   #>                                                                              #>  Pop_Pct_Hispanic      HU_Tot       HU_Pct_Occupied HU_Pct_Vacant    #>  Min.   : 0.7159   Min.   : 25782   Min.   :46.59   Min.   : 1.123   #>  1st Qu.: 5.6869   1st Qu.: 47813   1st Qu.:87.58   1st Qu.: 4.995   #>  Median :11.3890   Median : 55208   Median :92.36   Median : 7.638   #>  Mean   :18.9952   Mean   : 57812   Mean   :90.36   Mean   : 9.639   #>  3rd Qu.:24.5716   3rd Qu.: 65673   3rd Qu.:95.00   3rd Qu.:12.419   #>  Max.   :96.0544   Max.   :140746   Max.   :98.88   Max.   :53.406   #>                                                                      #>   Pop_Pct_0004    Pop_Pct_0509     Pop_Pct_1014    Pop_Pct_2544   #>  Min.   : 1.80   Min.   : 1.400   Min.   : 1.30   Min.   :11.70   #>  1st Qu.: 5.00   1st Qu.: 5.400   1st Qu.: 5.80   1st Qu.:23.90   #>  Median : 5.60   Median : 6.000   Median : 6.50   Median :26.10   #>  Mean   : 5.69   Mean   : 6.035   Mean   : 6.47   Mean   :26.76   #>  3rd Qu.: 6.30   3rd Qu.: 6.700   3rd Qu.: 7.20   3rd Qu.:28.70   #>  Max.   :16.70   Max.   :14.400   Max.   :12.50   Max.   :55.40   #>                                                                   #>   Pop_Pct_4564    Pop_Pct_6574   Pop_Pct_75plus    Pop_Pct_1517  #>  Min.   : 9.60   Min.   : 3.60   Min.   : 1.700   Min.   :0.60   #>  1st Qu.:23.50   1st Qu.: 8.30   1st Qu.: 5.300   1st Qu.:3.50   #>  Median :25.40   Median : 9.90   Median : 6.700   Median :3.90   #>  Mean   :25.14   Mean   :10.03   Mean   : 6.837   Mean   :3.92   #>  3rd Qu.:27.00   3rd Qu.:11.40   3rd Qu.: 8.100   3rd Qu.:4.30   #>  Max.   :34.00   Max.   :30.80   Max.   :27.000   Max.   :6.70   #>                                                                  #>   Pop_Pct_1824    #>  Min.   : 2.900   #>  1st Qu.: 7.400   #>  Median : 8.300   #>  Mean   : 9.118   #>  3rd Qu.: 9.700   #>  Max.   :39.900   #>"},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"Randomly select samples for various probability-based methods","text":"following examples allocation sampling IPEDS data. primary functions workflows allocate() allocate sample sizes though can get sample allocation another manner, prefer select_sample() specify frame, sample sizes, sampling method, strata (relevant), measure size (relevant), sort method (relevant).","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"allocation","dir":"","previous_headings":"Example Workflow","what":"Allocation","title":"Randomly select samples for various probability-based methods","text":"First, must summary frame. case, specifying sample size 500 proportionally allocated across region.","code":"set.seed(8675309)  ipeds_summary <- ipeds |>   tidytable::summarize(     N = tidytable::n(),     .by = \"OBEREG\"   ) |>   tidytable::ungroup()  ipeds_summary #> # A tidytable: 10 × 2 #>    OBEREG                                                         N #>    <fct>                                                      <int> #>  1 U.S. Service schools                                           7 #>  2 New England (CT, ME, MA, NH, RI, VT)                         299 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                            971 #>  4 Great Lakes (IL, IN, MI, OH, WI)                             851 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                          468 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)  1467 #>  7 Southwest (AZ, NM, OK, TX)                                   633 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                         216 #>  9 Far West (AK, CA, HI, NV, OR, WA)                            870 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)    132  ipeds_alloc <- ipeds_summary |>   tidytable::mutate(     sample_size = allocate(\"proportional\", N.h = N, n.samp = 500)   ) #> Sample allocation of 500 using proportional with the relevant inputs: #>   N.h = 7, 299, 971, 851, 468, 1467, 633, 216, 870, 132 #>  #> Output: #> 2, 25, 82, 73, 39, 124, 53, 18, 73, 11  ipeds_alloc #> # A tidytable: 10 × 3 #>    OBEREG                                                         N sample_size #>    <fct>                                                      <int>       <int> #>  1 U.S. Service schools                                           7           2 #>  2 New England (CT, ME, MA, NH, RI, VT)                         299          25 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                            971          82 #>  4 Great Lakes (IL, IN, MI, OH, WI)                             851          73 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                          468          39 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)  1467         124 #>  7 Southwest (AZ, NM, OK, TX)                                   633          53 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                         216          18 #>  9 Far West (AK, CA, HI, NV, OR, WA)                            870          73 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)    132          11"},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"sampling","dir":"","previous_headings":"Example Workflow","what":"Sampling","title":"Randomly select samples for various probability-based methods","text":", able select stratified sample demonstrate using SRS systematic PPS. systematic sequential sampling methods, can specify sort variables sort method. Often, want able re-run sampling code get sample. , also set seed.","code":"ipeds_srs <- ipeds |>   select_sample(     method = \"srs\",     n = tidytable::select(ipeds_alloc, OBEREG, sample_size),     strata = \"OBEREG\"   ) #> Stratum: OBEREG = Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)  #> --Frame size: 1467 #> --Sample size: 124 #> Stratum: OBEREG = Far West (AK, CA, HI, NV, OR, WA)  #> --Frame size: 870 #> --Sample size: 73 #> Stratum: OBEREG = Southwest (AZ, NM, OK, TX)  #> --Frame size: 633 #> --Sample size: 53 #> Stratum: OBEREG = U.S. Service schools  #> --Frame size: 7 #> --Sample size: 2 #> Stratum: OBEREG = Plains (IA, KS, MN, MO, NE, ND, SD)  #> --Frame size: 468 #> --Sample size: 39 #> Stratum: OBEREG = Rocky Mountains (CO, ID, MT, UT, WY)  #> --Frame size: 216 #> --Sample size: 18 #> Stratum: OBEREG = New England (CT, ME, MA, NH, RI, VT)  #> --Frame size: 299 #> --Sample size: 25 #> Stratum: OBEREG = Mid East (DE, DC, MD, NJ, NY, PA)  #> --Frame size: 971 #> --Sample size: 82 #> Stratum: OBEREG = Great Lakes (IL, IN, MI, OH, WI)  #> --Frame size: 851 #> --Sample size: 73 #> Stratum: OBEREG = Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)  #> --Frame size: 132 #> --Sample size: 11  ipeds_srs #> # A tidytable: 500 × 18 #>    OBEREG      UNITID INSTNM STABBR  FIPS ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>    <fct>        <dbl> <chr>  <chr>  <dbl> <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 Southeast … 101028 Chatt… AL         1 At lea… Publi… Subur… Degree-… At lea… #>  2 Southeast … 101602 Lurle… AL         1 At lea… Publi… Rural… Degree-… Associ… #>  3 Southeast … 101879 Unive… AL         1 Four o… Publi… City:… Degree-… Doctor… #>  4 Southeast … 102049 Samfo… AL         1 Four o… Priva… Subur… Degree-… Doctor… #>  5 Southeast … 102313 H Cou… AL         1 At lea… Publi… City:… Degree-… Associ… #>  6 Southeast … 107318 Arkan… AR         5 At lea… Publi… Subur… Degree-… Associ… #>  7 Southeast … 107460 North… AR         5 At lea… Publi… Town:… Degree-… At lea… #>  8 Southeast … 132842 Albiz… FL        12 Four o… Priva… City:… Degree-… Doctor… #>  9 Southeast … 133386 Dayto… FL        12 Four o… Publi… City:… Degree-… Bachel… #> 10 Southeast … 133881 Flori… FL        12 Four o… Priva… City:… Degree-… Doctor… #> # ℹ 490 more rows #> # ℹ 8 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SelectionProbability <dbl>, #> #   SamplingWeight <dbl> ipeds_pps <- ipeds |>   select_sample(     method = \"sys_pps\",     n = tidytable::select(ipeds_alloc, OBEREG, sample_size),     strata = \"OBEREG\",     mos = \"ENRTOT\",     sort_vars = \"SECTOR\",     sort_method = \"serpentine\"   ) #> Stratum: OBEREG = Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)  #> --Frame size: 1467 #> --Sample size: 124 #> --Sampling interval (k): 37489.19 #> --Random start (r): 17174.08 #> Stratum: OBEREG = Far West (AK, CA, HI, NV, OR, WA)  #> --Frame size: 870 #> --Sample size: 73 #> --Sampling interval (k): 46640.48 #> --Random start (r): 23535.96 #> Stratum: OBEREG = Southwest (AZ, NM, OK, TX)  #> --Frame size: 633 #> --Sample size: 53 #> --Sampling interval (k): 49474.49 #> --Random start (r): 33072.34 #> Stratum: OBEREG = U.S. Service schools  #> --Frame size: 7 #> --Sample size: 2 #> --Sampling interval (k): 9372 #> --Random start (r): 2483.683 #> Stratum: OBEREG = Plains (IA, KS, MN, MO, NE, ND, SD)  #> --Frame size: 468 #> --Sample size: 39 #> --Sampling interval (k): 35210.1 #> --Random start (r): 301.2639 #> Stratum: OBEREG = Rocky Mountains (CO, ID, MT, UT, WY)  #> --Frame size: 216 #> --Sample size: 18 #> --Sampling interval (k): 57314.5 #> --Random start (r): 10947.04 #> Stratum: OBEREG = New England (CT, ME, MA, NH, RI, VT)  #> --Frame size: 299 #> --Sample size: 25 #> --Sampling interval (k): 44218.08 #> --Random start (r): 6258.501 #> Stratum: OBEREG = Mid East (DE, DC, MD, NJ, NY, PA)  #> --Frame size: 971 #> --Sample size: 82 #> --Sampling interval (k): 33082.89 #> --Random start (r): 11354.24 #> Stratum: OBEREG = Great Lakes (IL, IN, MI, OH, WI)  #> --Frame size: 851 #> --Sample size: 73 #> --Sampling interval (k): 35699.49 #> --Random start (r): 3529.973 #> Stratum: OBEREG = Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)  #> --Frame size: 132 #> --Sample size: 11 #> --Sampling interval (k): 16320.64 #> --Random start (r): 11469.85  ipeds_pps #> # A tidytable: 474 × 19 #>    OBEREG      UNITID INSTNM STABBR  FIPS ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>    <fct>        <dbl> <chr>  <chr>  <dbl> <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 Southeast … 100663 Unive… AL         1 Four o… Publi… City:… Degree-… Doctor… #>  2 Southeast … 100751 The U… AL         1 Four o… Publi… City:… Degree-… Doctor… #>  3 Southeast … 100858 Aubur… AL         1 Four o… Publi… City:… Degree-… Doctor… #>  4 Southeast … 101480 Jacks… AL         1 Four o… Publi… Subur… Degree-… Doctor… #>  5 Southeast … 102368 Troy … AL         1 Four o… Publi… Town:… Degree-… Doctor… #>  6 Southeast … 106397 Unive… AR         5 Four o… Publi… City:… Degree-… Doctor… #>  7 Southeast … 106467 Arkan… AR         5 Four o… Publi… Town:… Degree-… Doctor… #>  8 Southeast … 132693 Easte… FL        12 Four o… Publi… City:… Degree-… Bachel… #>  9 Southeast … 132851 Colle… FL        12 Four o… Publi… City:… Degree-… Bachel… #> 10 Southeast … 132903 Unive… FL        12 Four o… Publi… Subur… Degree-… Doctor… #> # ℹ 464 more rows #> # ℹ 9 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SamplingWeight <dbl>, NumberHits <int>, #> #   ExpectedHits <dbl> sum(ipeds_pps$NumberHits) #> [1] 500"},{"path":"https://rtiinternational.github.io/SampleSelectR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Randomly select samples for various probability-based methods","text":"’d love help make SampleSelectR better! ’s workflow use: Start dev branch Always update local copy first (git pull origin dev). Create new branch work Name clearly, e.g. fix-readme, add-tests, feature-allocate. Make changes Update code, documentation, tests. adding function, include short example (possible) unit test. Push branch GitHub open PR dev.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/SampleSelectR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SampleSelectR: Randomly select samples for various probability-based methods — SampleSelectR-package","title":"SampleSelectR: Randomly select samples for various probability-based methods — SampleSelectR-package","text":"Randomly select samples SRS, systematic, various PPS methods. Also includes functionality select within strata allocate sample sizes.","code":""},{"path":[]},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/SampleSelectR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SampleSelectR: Randomly select samples for various probability-based methods — SampleSelectR-package","text":"Maintainer: Stephanie Zimmer sazimmer@rti.org Authors: John David Bunker, Jr. Thomas Burkett Philip Lee Haby Sow contributors: RTI International [funder]","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/Sampling_Output.html","id":null,"dir":"Reference","previous_headings":"","what":"Output sampling summary to the console Displays sample size, frame size, and optionally the sampling interval and random start. — Sampling_Output","title":"Output sampling summary to the console Displays sample size, frame size, and optionally the sampling interval and random start. — Sampling_Output","text":"Output sampling summary console Displays sample size, frame size, optionally sampling interval random start.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/Sampling_Output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output sampling summary to the console Displays sample size, frame size, and optionally the sampling interval and random start. — Sampling_Output","text":"","code":"Sampling_Output(n, N, k = NULL, r = NULL, curstrat = NULL)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/Sampling_Output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output sampling summary to the console Displays sample size, frame size, and optionally the sampling interval and random start. — Sampling_Output","text":"n Sample size. N Frame size. k Optional sampling interval. r Optional random start. curstrat Optional stratum label.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/Sampling_Output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output sampling summary to the console Displays sample size, frame size, and optionally the sampling interval and random start. — Sampling_Output","text":"Prints output console. Invisibly returns NULL","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample allocation — allocate","title":"Sample allocation — allocate","text":"Compute proportional, power, Neyman, optimal sample allocations.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample allocation — allocate","text":"","code":"allocate(   allocation,   N.h,   n.samp = NULL,   S.h = NULL,   c.h = NULL,   cost = NULL,   variance = NULL,   power = NULL,   lbound = 2 )"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample allocation — allocate","text":"allocation type allocation, must one \"proportional\", \"power\", \"neyman\", \"optimal\". N.h vector population stratum sizes (\\(N_h\\), positive values), example c(150, 600, 250).  required allocation types. n.samp total sample size allocated (positive integer length 1).  required following allocation types: proportional, power, Neyman, NULL otherwise. S.h vector stratum unit standard deviations (positive values length N.h) (\\(S_h\\)).  required following allocation types: Neyman, optimal, NULL otherwise. c.h vector cost per unit stratum h (positive values length N.h) (\\(c_h\\)).  required optimal allocation , NULL otherwise. cost total variable cost (positive value) \\((C – c_0)\\).  required cost-constrained optimal allocation , NULL otherwise. variance fixed variance target estimated mean (positive value) (\\(V_0\\)).  required precision-constrained optimal allocation , NULL otherwise. power power value power allocation (\\(0 \\le \\alpha \\le 1\\)).  required power allocation , NULL otherwise. lbound minimum stratum-level (positive integer length 1). Default value 2.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample allocation — allocate","text":"Integer vector length N.h final allocation","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Sample allocation — allocate","text":"allocate function allocates sample size n H strata using one following allocation methods: Proportional allocation [n.samp, N.h, allocation = \"proportional\"] $$n_h = n \\times \\frac{N_h}{\\sum\\limits_{h=1}^H N_h}$$  \\(n\\): total sample size allocated (function input n.samp),  \\(N_h\\): population size stratum h (function input N.h). Power allocation [n.samp, N.h, power, allocation = \"power\"] $$n_h = n \\times \\frac{N_h^\\alpha}{\\sum\\limits_{h=1}^H N_h^\\alpha}$$  \\(\\alpha\\): power value control --sampling \\(0 \\le \\alpha \\le 1\\) (function input power). Neyman allocation [n.samp, N.h, S.h, allocation = \"neyman\"] $$n_h = n \\times \\frac{N_h S_h}{\\sum\\limits_{h=1}^H N_h S_h}$$  \\(S_h\\):  standard deviation stratum h (function input S.h). Optimal allocation cost-constrained [N.h, S.h, c.h, cost, allocation = \"optimal\"] $$n_h = (C−c_0) \\times \\frac{N_h S_h / \\sqrt{c_h}}{\\sum\\limits_{h=1}^H N_h S_h \\sqrt{c_h}}$$              \\(c_h\\): cost per unit stratum h (function input c.h),  \\((C – c_0)\\): total variable cost (function input cost) precision-constrained [N.h, S.h, c.h, variance, allocation = \"optimal\"] $$n_h = N_h S_h / \\sqrt{c_h} \\times \\frac{\\sum\\limits_{h=1}^H N_h S_h \\sqrt{c_h}}{V_0 \\left(\\sum\\limits_{h=1}^H  N_h \\right)^2 + \\sum\\limits_{h=1}^H N_h S_h^2}$$  \\(V_0\\): fixed variance target estimated mean (function input variance) table presents relevant inputs type; irrelevant inputs entered, error message displayed.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/allocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample allocation — allocate","text":"","code":"# The first step is getting a frame summary #  Summarize the IPEDS dataset by OBEREG # - N: number of universities per region # - SD_ENRTOT: standard deviation of total enrollment per region # - Filter out rows with missing ENRTOT to ensure accurate variance estimates  ipeds_summary <- ipeds |>   tidytable::filter(!is.na(ENRTOT)) |>   tidytable::group_by(OBEREG) |>   tidytable::summarize(     N = tidytable::n(),     SD_ENRTOT = stats::sd(ENRTOT)   ) |>   tidytable::ungroup()  # Example of proportional allocation ipeds_summary |>   tidytable::mutate(     n = allocate(\"proportional\", N.h = N, n.samp = 500)   ) #> Sample allocation of 500 using proportional with the relevant inputs: #>   N.h = 7, 299, 971, 851, 468, 1467, 633, 216, 870, 132 #>  #> Output: #> 2, 25, 82, 72, 40, 124, 53, 18, 73, 11 #> # A tidytable: 10 × 4 #>    OBEREG                                                      N SD_ENRTOT     n #>    <fct>                                                   <int>     <dbl> <int> #>  1 U.S. Service schools                                        7     1680.     2 #>  2 New England (CT, ME, MA, NH, RI, VT)                      299    11800.    25 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                         971     5956.    82 #>  4 Great Lakes (IL, IN, MI, OH, WI)                          851     7537.    72 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                       468     5830.    40 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA,…  1467     7293.   124 #>  7 Southwest (AZ, NM, OK, TX)                                633    11149.    53 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                      216    14784.    18 #>  9 Far West (AK, CA, HI, NV, OR, WA)                         870     7641.    73 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, …   132     2981.    11  # Example of power allocation ipeds_summary |>   tidytable::mutate(     n = allocate(\"power\", N.h = N, power = 0.5, n.samp = 500)   ) #> Sample allocation of 500 using power with the relevant inputs: #>   N.h = 7, 299, 971, 851, 468, 1467, 633, 216, 870, 132 #>   power = 0.5 #>  #> Output: #> 6, 39, 70, 66, 49, 87, 57, 33, 67, 26 #> # A tidytable: 10 × 4 #>    OBEREG                                                      N SD_ENRTOT     n #>    <fct>                                                   <int>     <dbl> <int> #>  1 U.S. Service schools                                        7     1680.     6 #>  2 New England (CT, ME, MA, NH, RI, VT)                      299    11800.    39 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                         971     5956.    70 #>  4 Great Lakes (IL, IN, MI, OH, WI)                          851     7537.    66 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                       468     5830.    49 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA,…  1467     7293.    87 #>  7 Southwest (AZ, NM, OK, TX)                                633    11149.    57 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                      216    14784.    33 #>  9 Far West (AK, CA, HI, NV, OR, WA)                         870     7641.    67 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, …   132     2981.    26  # Example of Neyman allocation ipeds_summary |>   tidytable::mutate(     n = allocate(\"neyman\", N.h = N, n.samp = 500, S.h = SD_ENRTOT)   ) #> Sample allocation of 500 using neyman with the relevant inputs: #>   N.h = 7, 299, 971, 851, 468, 1467, 633, 216, 870, 132 #>   S.h = 1680.11385668608, 11800.2993217881, 5956.31998862919, 7536.59885863143, 5830.00927558341, 7293.44943657165, 11149.0070418081, 14783.8369003426, 7641.36426053871, 2981.44889034106 #>  #> Output: #> 2, 38, 62, 69, 29, 115, 76, 34, 71, 4 #> # A tidytable: 10 × 4 #>    OBEREG                                                      N SD_ENRTOT     n #>    <fct>                                                   <int>     <dbl> <int> #>  1 U.S. Service schools                                        7     1680.     2 #>  2 New England (CT, ME, MA, NH, RI, VT)                      299    11800.    38 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                         971     5956.    62 #>  4 Great Lakes (IL, IN, MI, OH, WI)                          851     7537.    69 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                       468     5830.    29 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA,…  1467     7293.   115 #>  7 Southwest (AZ, NM, OK, TX)                                633    11149.    76 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                      216    14784.    34 #>  9 Far West (AK, CA, HI, NV, OR, WA)                         870     7641.    71 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, …   132     2981.     4  # Example of Neyman allocation with a lower bound of 5 ipeds_summary |>   tidytable::mutate(     n = allocate(\"neyman\", N.h = N, n.samp = 500, S.h = SD_ENRTOT, lbound = 5)   ) #> Sample allocation of 500 using neyman with the relevant inputs: #>   N.h = 7, 299, 971, 851, 468, 1467, 633, 216, 870, 132 #>   S.h = 1680.11385668608, 11800.2993217881, 5956.31998862919, 7536.59885863143, 5830.00927558341, 7293.44943657165, 11149.0070418081, 14783.8369003426, 7641.36426053871, 2981.44889034106 #>  #> Output: #> 5, 38, 62, 68, 29, 113, 75, 34, 71, 5 #> # A tidytable: 10 × 4 #>    OBEREG                                                      N SD_ENRTOT     n #>    <fct>                                                   <int>     <dbl> <int> #>  1 U.S. Service schools                                        7     1680.     5 #>  2 New England (CT, ME, MA, NH, RI, VT)                      299    11800.    38 #>  3 Mid East (DE, DC, MD, NJ, NY, PA)                         971     5956.    62 #>  4 Great Lakes (IL, IN, MI, OH, WI)                          851     7537.    68 #>  5 Plains (IA, KS, MN, MO, NE, ND, SD)                       468     5830.    29 #>  6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA,…  1467     7293.   113 #>  7 Southwest (AZ, NM, OK, TX)                                633    11149.    75 #>  8 Rocky Mountains (CO, ID, MT, UT, WY)                      216    14784.    34 #>  9 Far West (AK, CA, HI, NV, OR, WA)                         870     7641.    71 #> 10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, …   132     2981.     5"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_frame_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the frame is a valid data structure — check_frame_type","title":"Check if the frame is a valid data structure — check_frame_type","text":"Ensures input frame data.frame, data.table, tibble.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_frame_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the frame is a valid data structure — check_frame_type","text":"","code":"check_frame_type(frame)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_frame_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the frame is a valid data structure — check_frame_type","text":"frame object validated sampling frame.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_frame_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the frame is a valid data structure — check_frame_type","text":"Stops execution validation fails. Invisibly returns TRUE.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the sample size n — check_n","title":"Validate the sample size n — check_n","text":"Performs set checks sample size, including numeric type, bounds, optional strata.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the sample size n — check_n","text":"","code":"check_n(n, frame, curstrat, n_le_N = FALSE)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the sample size n — check_n","text":"n Desired sample size. frame Data frame data table sampling frame. curstrat Optional character vector indicating stratum. n_le_N Logical. n forced less equal N?","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the sample size n — check_n","text":"Stops execution validation fails outputs message n == N. Invisibly returns TRUE.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_outall.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the 'outall' argument — check_outall","title":"Validate the 'outall' argument — check_outall","text":"Checks outall argument single logical value.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_outall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the 'outall' argument — check_outall","text":"","code":"check_outall(outall)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_outall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the 'outall' argument — check_outall","text":"outall logical value indicating whether return full frame selected rows.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_outall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the 'outall' argument — check_outall","text":"Stops execution validation fails. Invisibly returns TRUE.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_string_mos.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the measure of size (MOS) variable — check_string_mos","title":"Validate the measure of size (MOS) variable — check_string_mos","text":"Ensures MOS variable exists frame, numeric, contains missing negative values.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_string_mos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the measure of size (MOS) variable — check_string_mos","text":"","code":"check_string_mos(mos, frame)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_string_mos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the measure of size (MOS) variable — check_string_mos","text":"mos string symbol representing column name measure size. frame sampling frame data.frame similar object.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/check_string_mos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the measure of size (MOS) variable — check_string_mos","text":"Stops execution validation fails. Invisibly returns TRUE.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_inner.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a sequential PPS sample given expected number of hits — chromy_inner","title":"Select a sequential PPS sample given expected number of hits — chromy_inner","text":"Select sequential PPS sample given expected number hits","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_inner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a sequential PPS sample given expected number of hits — chromy_inner","text":"","code":"chromy_inner(exphits)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_inner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a sequential PPS sample given expected number of hits — chromy_inner","text":"exphits vector non-negative values","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_inner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a sequential PPS sample given expected number of hits — chromy_inner","text":"Returns vector length exphits number random hits unit","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_inner.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select a sequential PPS sample given expected number of hits — chromy_inner","text":"Chromy, J. R. (1979). “Sequential Sample Selection Methods.” Proceedings Survey Research Methods Section, 401–406. Washington, DC: American Statistical Association. http://www.asasrms.org/Proceedings/papers/1979_081.pdf","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a sequential PPS sample — chromy_pps","title":"Select a sequential PPS sample — chromy_pps","text":"Draws sequential sample size n. unit's probability selection proportional size measure. minimum replacement method discussed Chromy (1979).","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a sequential PPS sample — chromy_pps","text":"","code":"chromy_pps(frame, n, mos, outall = FALSE, curstrat = NULL)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a sequential PPS sample — chromy_pps","text":"frame input data frame function work . n sample size, parameter expects integer length 1.  function check n less equal number rows input frame. mos measure size, parameter expects character string indicate variable used measure size. variable must exist frame non-missing non-negative numeric variable. outall Output records selected records.  outall TRUE, records returned following variables created: SelectionIndicator, SamplingWeight, NumberHits, ExpectedHits.  outall FALSE, selected records returned following variables created:  SamplingWeight, NumberHits, ExpectedHits. curstrat character variable specifies current strata, used assertion n == N test.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a sequential PPS sample — chromy_pps","text":"Returns object type tidytable contains weight, expected hits (selection probability nonreplacement designs), number hits plus original variables. Include SelectionIndicator variable outall=TRUE","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select a sequential PPS sample — chromy_pps","text":"Chromy, J. R. (1979). “Sequential Sample Selection Methods.” Proceedings Survey Research Methods Section, 401–406. Washington, DC: American Statistical Association. http://www.asasrms.org/Proceedings/papers/1979_081.pdf","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/chromy_pps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a sequential PPS sample — chromy_pps","text":"","code":"# PPS sample of counties using population size as MOS # LA county will be selected two or three times based on expected hits # Cook, Harris, and Maricopa will be selected one or two times based on expected hits  county_2023 |>   tidytable::select(GEOID, Name, Pop_Tot) |>   chromy_pps(n = 75, mos = \"Pop_Tot\") |>   tidytable::arrange(desc(ExpectedHits)) #> Frame size: 3144 #> Sample size: 75 #> # A tidytable: 74 × 6 #>    GEOID Name                     Pop_Tot ExpectedHits NumberHits SamplingWeight #>    <chr> <chr>                      <dbl>        <dbl>      <dbl>          <dbl> #>  1 06037 Los Angeles County, Cal… 9848406        2.22           2          0.450 #>  2 17031 Cook County, Illinois    5185812        1.17           1          0.855 #>  3 48201 Harris County, Texas     4758579        1.07           1          0.931 #>  4 04013 Maricopa County, Arizona 4491987        1.01           1          0.987 #>  5 06073 San Diego County, Calif… 3282782        0.741          1          1.35  #>  6 36047 Kings County, New York   2646306        0.597          1          1.67  #>  7 32003 Clark County, Nevada     2293764        0.518          1          1.93  #>  8 12011 Broward County, Florida  1946127        0.439          1          2.28  #>  9 06085 Santa Clara County, Cal… 1903297        0.429          1          2.33  #> 10 26163 Wayne County, Michigan   1773767        0.400          1          2.50  #> # ℹ 64 more rows  county_2023 |>   tidytable::select(GEOID, Name, Pop_Tot) |>   chromy_pps(n = 75, mos = \"Pop_Tot\", outall = TRUE) |>   tidytable::arrange(desc(ExpectedHits)) #> Frame size: 3144 #> Sample size: 75 #> # A tidytable: 3,144 × 7 #>    GEOID Name  Pop_Tot ExpectedHits NumberHits SelectionIndicator SamplingWeight #>    <chr> <chr>   <dbl>        <dbl>      <dbl> <lgl>                       <dbl> #>  1 06037 Los … 9848406        2.22           2 TRUE                        0.450 #>  2 17031 Cook… 5185812        1.17           2 TRUE                        0.855 #>  3 48201 Harr… 4758579        1.07           1 TRUE                        0.931 #>  4 04013 Mari… 4491987        1.01           1 TRUE                        0.987 #>  5 06073 San … 3282782        0.741          0 FALSE                      NA     #>  6 06059 Oran… 3164063        0.714          1 TRUE                        1.40  #>  7 12086 Miam… 2685296        0.606          0 FALSE                      NA     #>  8 36047 King… 2646306        0.597          1 TRUE                        1.67  #>  9 48113 Dall… 2603816        0.588          0 FALSE                      NA     #> 10 06065 Rive… 2449909        0.553          0 FALSE                      NA     #> # ℹ 3,134 more rows"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/county_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"American Community Survey (ACS) 5-Year Estimates, 2023 for counties — county_2023","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for counties — county_2023","text":"select set estimates ACS counties 50 states District Columbia.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/county_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for counties — county_2023","text":"","code":"county_2023"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/county_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for counties — county_2023","text":"tibble/data.frame 3,144 rows 25 columns: GEOID Geographic Identifier (GEOID) county (character) Name Name county (character) State State (Abbreviation) (character) Region Census Region (factor) Divison Census Division (factor) Pop_Tot Total population (B03002) (numeric) Pop_Pct_White_NH Percent population White alone, non-Hispanic (B03002) (numeric) Pop_Pct_Black_NH Percent population Black African American alone, non-Hispanic (B03002) (numeric) Pop_Pct_AIAN_NH Percent population American Indian Alaska Native alone, non-Hispanic (B03002) (numeric) Pop_Pct_Asian_NH Percent population Asian alone, non-Hispanic (B03002) (numeric) Pop_Pct_NHPI_NH Percent population Native Hawaiian Pacific Islander alone, non-Hispanic (B03002) (numeric) Pop_Pct_Other_NH Percent population another race (including 2 races), non-Hispanic (B03002) (numeric) Pop_Pct_Hispanic Percent population Hispanic (B03002) (numeric) HU_Tot Total number housing units (B25002) (numeric) HU_Pct_Occupied Percent housing units occupied (B25002) (numeric) HU_Pct_Vacant Percent housing units vacant (B25002) (numeric) Pop_Pct_0004 Percent population 0-4 years age (S0101) (numeric) Pop_Pct_0509 Percent population 5-9 years age (S0101) (numeric) Pop_Pct_1014 Percent population 10-14 years age (S0101) (numeric) Pop_Pct_2544 Percent population 15-17 years age (S0101) (numeric) Pop_Pct_4564 Percent population 18-24 years age (S0101) (numeric) Pop_Pct_6574 Percent population 25-44 years age (S0101) (numeric) Pop_Pct_75plus Percent population 45-64 years age (S0101) (numeric) Pop_Pct_1517 Percent population 65-74 years age (S0101) (numeric) Pop_Pct_1824 Percent population 75 years age older (S0101) (numeric)","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/county_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for counties — county_2023","text":"U.S. Census Bureau, \"American Community Survey 5-Year Estimates\" 2023, https://api.census.gov/data/2023/acs/acs5, accessed May 30, 2025. Tables B03002, B25002, S0101. Note - tidycensus package used download data Census API. Region division coded based https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/create_group_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grouping variable — create_group_variable","title":"Create grouping variable — create_group_variable","text":"Given data frame vector variables, creates new variable assigns unique ID group rows values given variables. function return data frame new id variable added.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/create_group_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grouping variable — create_group_variable","text":"","code":"create_group_variable(.data, groupvars, groupid)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/create_group_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grouping variable — create_group_variable","text":".data data frame, tibble, data.table. default. groupvars vector character variables names columns sort . default. groupid ID grouping variable name. default.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/create_group_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create grouping variable — create_group_variable","text":"copy input data addition grouping ID variable","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/ipeds.html","id":null,"dir":"Reference","previous_headings":"","what":"IPEDS - Post secondary education institutions, Fall 2023 — ipeds","title":"IPEDS - Post secondary education institutions, Fall 2023 — ipeds","text":"select set characteristics postsecondary educational institutions Integrated Postsecondary Education Data System (IPEDS) operational institutions reporting fall enrollment data 2023.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/ipeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPEDS - Post secondary education institutions, Fall 2023 — ipeds","text":"","code":"ipeds"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/ipeds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IPEDS - Post secondary education institutions, Fall 2023 — ipeds","text":"tibble 5914 rows 16 columns: UNITID Unique identification number institution (numeric) INSTNM Institution (entity) name (character) STABBR State abbreviation (character) FIPS FIPS state code (numeric) OBEREG Bureau Economic Analysis (BEA) regions (factor) ICLEVEL Level institution (factor) SECTOR Sector institution (factor) LOCALE Degree urbanization (Urban-centric locale) (factor) DEGGRANT Degree-granting status (factor) HLOFFER Highest level offering (factor) ENRTOT Total  enrollment (numeric) EFUG Undergraduate enrollment (numeric) EFUG1ST First-time degree/certificate-seeking undergraduate enrollment (numeric) EFUGFT Full-time undergraduate enrollment (numeric) EFGRAD Graduate enrollment (numeric) EFGRADFT Full-time graduate enrollment (numeric)","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/ipeds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"IPEDS - Post secondary education institutions, Fall 2023 — ipeds","text":"National Center Education Statistics, \"Integrated Postsecondary Education Data System \" 2023, https://nces.ed.gov/ipeds/datacenter/DataFiles.aspx?year=2023&surveyNumber=-1&sid=4737d338-5121-4355-bb91-01ffa92243ef&rtid=7, downloaded May 2, 2025.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/puma_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"American Community Survey (ACS) 5-Year Estimates, 2023 for Public Use Microdata Areas (PUMAs) — puma_2023","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for Public Use Microdata Areas (PUMAs) — puma_2023","text":"select set estimates ACS PUMAs 50 states District Columbia.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/puma_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for Public Use Microdata Areas (PUMAs) — puma_2023","text":"","code":"puma_2023"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/puma_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for Public Use Microdata Areas (PUMAs) — puma_2023","text":"tibble/data.frame 2,462 rows 25 columns: GEOID Geographic Identifier (GEOID) PUMA (character) Name Name PUMA (character) State State (Abbreviation) (character) Region Census Region (factor) Division Census Division (factor) Pop_Tot Total population (B03002) (numeric) Pop_Pct_White_NH Percent population White alone, non-Hispanic (B03002) (numeric) Pop_Pct_Black_NH Percent population Black African American alone, non-Hispanic (B03002) (numeric) Pop_Pct_AIAN_NH Percent population American Indian Alaska Native alone, non-Hispanic (B03002) (numeric) Pop_Pct_Asian_NH Percent population Asian alone, non-Hispanic (B03002) (numeric) Pop_Pct_NHPI_NH Percent population Native Hawaiian Pacific Islander alone, non-Hispanic (B03002) (numeric) Pop_Pct_Other_NH Percent population another race (including 2 races), non-Hispanic (B03002) (numeric) Pop_Pct_Hispanic Percent population Hispanic (B03002) (numeric) HU_Tot Total number housing units (B25002) (numeric) HU_Pct_Occupied Percent housing units occupied (B25002) (numeric) HU_Pct_Vacant Percent housing units vacant (B25002) (numeric) Pop_Pct_0004 Percent population 0-4 years age (S0101) (numeric) Pop_Pct_0509 Percent population 5-9 years age (S0101) (numeric) Pop_Pct_1014 Percent population 10-14 years age (S0101) (numeric) Pop_Pct_2544 Percent population 15-17 years age (S0101) (numeric) Pop_Pct_4564 Percent population 18-24 years age (S0101) (numeric) Pop_Pct_6574 Percent population 25-44 years age (S0101) (numeric) Pop_Pct_75plus Percent population 45-64 years age (S0101) (numeric) Pop_Pct_1517 Percent population 65-74 years age (S0101) (numeric) Pop_Pct_1824 Percent population 75 years age older (S0101) (numeric)","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/puma_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"American Community Survey (ACS) 5-Year Estimates, 2023 for Public Use Microdata Areas (PUMAs) — puma_2023","text":"U.S. Census Bureau, \"American Community Survey 5-Year Estimates\" 2023, https://api.census.gov/data/2023/acs/acs5, accessed May 30, 2025. Tables B03002, B25002, S0101. Note - tidycensus package used download data Census API. Region division coded based https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/select_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample selection function — select_sample","title":"Sample selection function — select_sample","text":"Selects random sample using specified method sample size. Selection can also optionally stratified /include measure size (mos) PPS method used.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/select_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample selection function — select_sample","text":"","code":"select_sample(   frame,   method,   n,   outall = FALSE,   strata = NULL,   mos = NULL,   sort_vars = NULL,   sort_method = NULL )"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/select_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample selection function — select_sample","text":"frame data frame, data.table, tibble draw sample. default. method desired sampling method. Valid options \"srs\", \"sys_eq\", \"sys_pps\", \"chromy_pps\". default. n sample size draw frame. strata NULL, must positive integer. strata NULL, must data.frame, tibble, data.table columns stratification variable type variable names frame plus column sample size (sample_size) positive integer. default. outall logical value indicating whether return entire frame selection indicator just sample. Default FALSE. strata vector characters variable names strata. Default NULL. mos character string defining variable name frame measure size. NULL, must method = c(\"sys_pps\", \"chromy_pps\"). NULL, must method=c(\"srs\", \"sys\"). Default NULL. sort_vars vector characters indicating variables used sort frame. NULL, method = \"srs\". Default NULL. sort_method character string defining method implicitly sort frame. Valid options \"serpentine\" \"nest\". Must coincide sort_var; .e., must NULL must NULL. Default NULL.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/select_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample selection function — select_sample","text":"tidytable object containing entire frame selection indicator just sample, dependent value outall. Selection probability sampling weight also included. May include various summary messages console applicable certain sampling methods.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/select_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample selection function — select_sample","text":"","code":"# SRS of 100 US counties, using geographic region as strata # n is a data frame containing the strata values and corresponding desired sample size # Sample size column must be titled 'sample_size'  n_df_srs <- data.frame(   Region = as.factor(c(\"Northeast\", \"Midwest\", \"South\", \"West\")),   sample_size = c(25, 25, 25, 25) )  county_2023 |>   select_sample(method = \"srs\", n = n_df_srs, strata = \"Region\") #> Stratum: Region = South  #> --Frame size: 1422 #> --Sample size: 25 #> Stratum: Region = West  #> --Frame size: 449 #> --Sample size: 25 #> Stratum: Region = Northeast  #> --Frame size: 218 #> --Sample size: 25 #> Stratum: Region = Midwest  #> --Frame size: 1055 #> --Sample size: 25 #> # A tidytable: 100 × 27 #>    Region GEOID Name    State Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <fct>  <chr> <chr>   <chr> <fct>      <dbl>            <dbl>            <dbl> #>  1 South  05043 Drew C… AR    West So…   17143             64.9           26.7   #>  2 South  05097 Montgo… AR    West So…    8571             89.7            0.840 #>  3 South  12011 Browar… FL    South A… 1946127             31.9           27.6   #>  4 South  12109 St. Jo… FL    South A…  292243             78.6            4.93  #>  5 South  13071 Colqui… GA    South A…   45907             54.3           22.8   #>  6 South  13093 Dooly … GA    South A…   11026             40.9           47.7   #>  7 South  13127 Glynn … GA    South A…   84987             62.1           24.5   #>  8 South  13259 Stewar… GA    South A…    4978             24.6           59.7   #>  9 South  13273 Terrel… GA    South A…    8941             36.4           59.6   #> 10 South  21131 Leslie… KY    East So…   10261             96.8            0.526 #> # ℹ 90 more rows #> # ℹ 19 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …   # Systematic sample of 250 US universities. Each unit has an equal probability of being selected # Includes a nested sort of enrollment total within sector # Returns all obs from original data frame with a selection indicator column  sample_sys_eq <- ipeds |>   select_sample(     method = \"sys_eq\", n = 250, outall = TRUE,     sort_vars = c(\"SECTOR\", \"ENRTOT\"), sort_method = \"nest\"   ) #> Frame size: 5914 #> Sample size: 250 #> Sampling interval (k): 23.656 #> Random start (r): 10.85918  # For samples taken with outall = TRUE, the sample size can be verified by summing # the SelectionIndicator column.  sample_sys_eq #> # A tidytable: 5,914 × 19 #>    UNITID INSTNM      STABBR  FIPS OBEREG ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>     <dbl> <chr>       <chr>  <dbl> <fct>  <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 180203 Aaniiih Na… MT        30 Rocky… Four o… Publi… Rural… Degree-… Bachel… #>  2 491297 University… WI        55 Great… Four o… Publi… Rural… Degree-… Bachel… #>  3 200086 Nueta Hida… ND        38 Plain… Four o… Publi… Rural… Degree-… Bachel… #>  4 219408 Sisseton W… SD        46 Plain… Four o… Publi… Rural… Degree-… Bachel… #>  5 260372 Lac Courte… WI        55 Great… Four o… Publi… Rural… Degree-… Master… #>  6 214607 Pennsylvan… PA        42 Mid E… Four o… Publi… Subur… Degree-… Master… #>  7 366340 Stone Chil… MT        30 Rocky… Four o… Publi… Rural… Degree-… Bachel… #>  8 200466 Sitting Bu… ND        38 Plain… Four o… Publi… Rural… Degree-… Master… #>  9 434584 Ilisagvik … AK         2 Far W… Four o… Publi… Rural… Degree-… Bachel… #> 10 243188 University… PR        72 Other… Four o… Publi… Rural… Degree-… Bachel… #> # ℹ 5,904 more rows #> # ℹ 9 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SelectionIndicator <lgl>, #> #   SelectionProbability <dbl>, SamplingWeight <dbl> sum(sample_sys_eq$SelectionIndicator) #> [1] 250   # Systematic PPS sample of 250 US universities. Each unit's probability of selection # is proportional to its size measure. # Using enrollment total as MOS # Includes a nested sort of enrollment total within sector  sample_sys_pps <- ipeds |>   select_sample(     method = \"sys_pps\", n = 250, mos = \"ENRTOT\",     sort_vars = c(\"SECTOR\", \"ENRTOT\"), sort_method = \"nest\"   ) #> Frame size: 5914 #> Sample size: 250 #> Sampling interval (k): 78812 #> Random start (r): 10272.68  # For pps samples, it is possible for a single sampling unit to be selected multiple times # due to a large mos value. This is especially true as desired sample size increases. The # result is the final sample may not meet the desired sample size. To verify the pps sample, # the NumberHits column can be summed and should total to the desired sample size.  sample_sys_pps #> # A tidytable: 247 × 19 #>    UNITID INSTNM      STABBR  FIPS OBEREG ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>     <dbl> <chr>       <chr>  <dbl> <fct>  <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 214795 Pennsylvan… PA        42 Mid E… Four o… Publi… Rural… Degree-… Bachel… #>  2 187596 Navajo Tec… NM        35 South… Four o… Publi… Rural… Degree-… Doctor… #>  3 228501 Sul Ross S… TX        48 South… Four o… Publi… Town:… Degree-… Master… #>  4 204705 Ohio State… OH        39 Great… Four o… Publi… Subur… Degree-… Bachel… #>  5 163338 University… MD        24 Mid E… Four o… Publi… Town:… Degree-… Doctor… #>  6 487010 The Univer… TN        47 South… Four o… Publi… City:… Degree-… Doctor… #>  7 219259 Northern S… SD        46 Plain… Four o… Publi… Town:… Degree-… Master… #>  8 218645 University… SC        45 South… Four o… Publi… Subur… Degree-… Master… #>  9 207397 Oklahoma S… OK        40 South… Four o… Publi… City:… Degree-… Bachel… #> 10 155025 Emporia St… KS        20 Plain… Four o… Publi… Town:… Degree-… Doctor… #> # ℹ 237 more rows #> # ℹ 9 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SamplingWeight <dbl>, NumberHits <int>, #> #   ExpectedHits <dbl> sum(sample_sys_pps$NumberHits) #> [1] 250   # Sequential aka Chromy's method PPS sample of 500 PUMAs, using geographic region as strata # Includes a serpentine sort of geographic division then state # Using population total as MOS, each unit's probability of selection is proportional to its # size measure. # Note that there may be a discrepancy between the desired and final sample sizes. The final # sample size can be verified by totaling NumberHits.  n_df_chr <- data.frame(   Region = as.factor(c(\"Northeast\", \"Midwest\", \"South\", \"West\")),   sample_size = c(125, 125, 125, 125) )  puma_2023 |>   select_sample(     method = \"chromy_pps\", n = n_df_chr, strata = \"Region\", mos = \"Pop_Tot\",     sort_vars = c(\"Division\", \"State\"), sort_method = \"serpentine\"   ) #> Stratum: Region = South  #> --Frame size: 952 #> --Sample size: 125 #> Stratum: Region = West  #> --Frame size: 581 #> --Sample size: 125 #> Stratum: Region = Northeast  #> --Frame size: 423 #> --Sample size: 125 #> Stratum: Region = Midwest  #> --Frame size: 506 #> --Sample size: 125 #> # A tidytable: 500 × 28 #>    Region GEOID   Name  State Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <fct>  <chr>   <chr> <chr> <fct>      <dbl>            <dbl>            <dbl> #>  1 South  1000105 Sout… DE    South A…  107205             59.0            23.3  #>  2 South  1200902 Brev… FL    South A…  124268             82.9             2.04 #>  3 South  1201106 Brow… FL    South A…  186422             29.4            28.1  #>  4 South  1201113 Brow… FL    South A…  125752             26.9            22.6  #>  5 South  1201500 Char… FL    South A…  195083             82.4             5.10 #>  6 South  1203104 Duva… FL    South A…  120322             45.6            28.3  #>  7 South  1203107 Duva… FL    South A…  131852             64.7             9.97 #>  8 South  1205704 Hill… FL    South A…  136079             54.3             6.31 #>  9 South  1205707 Hill… FL    South A…  152043             38.3            18.3  #> 10 South  1206902 Lake… FL    South A…  136281             73.1             9.06 #> # ℹ 490 more rows #> # ℹ 20 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/serp_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Serpentine sort function — serp_sort","title":"Serpentine sort function — serp_sort","text":"Sorts rows given data frame hierarchical fashion given list variables (...)","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/serp_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serpentine sort function — serp_sort","text":"","code":"serp_sort(.data, ..., naorder = TRUE, sortID = FALSE)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/serp_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serpentine sort function — serp_sort","text":".data data frame. default. ... Variables sort - must listed character variables. default. naorder Logical value whether put NA values end sorted data frame. Default value TRUE treats NA values largest values sorting. value FALSE treats NA Values smallest values sorting. sortID Logical value indicates whether sort group information used implement sorting added .data. default, sort group FALSE means sort group information added .data. TRUE, k variables sort , set k-1 sort group variables names sortSerpj (j=1 k-1) added .data.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/serp_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serpentine sort function — serp_sort","text":"copy .data hierarchically sorted , specified, includes sort group variables created sorting","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/srs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple random sampling function — srs","title":"Simple random sampling function — srs","text":"Draws simple random sample size n.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/srs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple random sampling function — srs","text":"","code":"srs(frame, n, outall = FALSE, curstrat = NULL)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/srs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple random sampling function — srs","text":"frame data frame, data.table, tibble draw sample. default. n sample size draw frame. Must positive integer. default. outall logical value indicating whether return entire frame selection indicator just sample. Default FALSE. curstrat character string indicating current stratum. Used printing messages n = N. Default NULL.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/srs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple random sampling function — srs","text":"tidytable object containing entire frame selection indicator just sample, dependent value outall. Selection probability sampling weight also included. sample size, n, population size, N, printed console.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/srs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple random sampling function — srs","text":"","code":"# Random sample of 200 universities, only sampled rows returned ipeds |>   tidytable::filter(!is.na(ENRTOT)) |>   srs(n = 200, outall = FALSE) #> Frame size: 5914 #> Sample size: 200 #> # A tidytable: 200 × 18 #>    UNITID INSTNM      STABBR  FIPS OBEREG ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>     <dbl> <chr>       <chr>  <dbl> <fct>  <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 100690 Amridge Un… AL         1 South… Four o… Priva… City:… Degree-… Doctor… #>  2 100812 Athens Sta… AL         1 South… Four o… Publi… Town:… Degree-… Master… #>  3 101435 Huntingdon… AL         1 South… Four o… Priva… City:… Degree-… Master… #>  4 101587 University… AL         1 South… Four o… Publi… Rural… Degree-… Doctor… #>  5 102030 Bishop Sta… AL         1 South… At lea… Publi… City:… Degree-… Associ… #>  6 102076 Snead Stat… AL         1 South… At lea… Publi… Town:… Degree-… Associ… #>  7 105154 Mesa Commu… AZ         4 South… At lea… Publi… City:… Degree-… At lea… #>  8 106795 Cossatot C… AR         5 South… At lea… Publi… Town:… Degree-… Associ… #>  9 110404 California… CA         6 Far W… Four o… Priva… City:… Degree-… Doctor… #> 10 110583 California… CA         6 Far W… Four o… Publi… City:… Degree-… Doctor… #> # ℹ 190 more rows #> # ℹ 8 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SelectionProbability <dbl>, #> #   SamplingWeight <dbl>  # Return full dataset with selection indicators ipeds |>   tidytable::filter(!is.na(ENRTOT)) |>   srs(n = 200, outall = TRUE) #> Frame size: 5914 #> Sample size: 200 #> # A tidytable: 5,914 × 19 #>    UNITID INSTNM      STABBR  FIPS OBEREG ICLEVEL SECTOR LOCALE DEGGRANT HLOFFER #>     <dbl> <chr>       <chr>  <dbl> <fct>  <fct>   <fct>  <fct>  <fct>    <fct>   #>  1 100654 Alabama A … AL         1 South… Four o… Publi… City:… Degree-… Doctor… #>  2 100663 University… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #>  3 100690 Amridge Un… AL         1 South… Four o… Priva… City:… Degree-… Doctor… #>  4 100706 University… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #>  5 100724 Alabama St… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #>  6 100751 The Univer… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #>  7 100760 Central Al… AL         1 South… At lea… Publi… Town:… Degree-… Associ… #>  8 100812 Athens Sta… AL         1 South… Four o… Publi… Town:… Degree-… Master… #>  9 100830 Auburn Uni… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #> 10 100858 Auburn Uni… AL         1 South… Four o… Publi… City:… Degree-… Doctor… #> # ℹ 5,904 more rows #> # ℹ 9 more variables: ENRTOT <dbl>, EFUG <dbl>, EFUG1ST <dbl>, EFUGFT <dbl>, #> #   EFGRAD <dbl>, EFGRADFT <dbl>, SelectionProbability <dbl>, #> #   SamplingWeight <dbl>, SelectionIndicator <lgl>"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":null,"dir":"Reference","previous_headings":"","what":"Systematic Sampling Without Replacement — sys","title":"Systematic Sampling Without Replacement — sys","text":"Draws systematic sample size n data frame. unit equal probability selected.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Systematic Sampling Without Replacement — sys","text":"","code":"sys(frame, n, curstrat = NULL, outall = FALSE)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Systematic Sampling Without Replacement — sys","text":"frame data.frame, tibble, data.table containing sampling frame. Must least one row. n Integer. desired sample size. Must less equal number rows frame. curstrat Character NULL. Optional stratum name printing messages. outall logical indicator whether full frame returned just sample","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Systematic Sampling Without Replacement — sys","text":"data.table original columns plus: SelectionProbability Equal n / N units. SamplingWeight Equal N / n units. SelectionIndicator TRUE selected, FALSE otherwise.-included outall=TRUE NumberHits 1 selected, 0 otherwise. ExpectedHits Equal SelectionProbability.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Systematic Sampling Without Replacement — sys","text":"Kalton, G. (1983). Introduction Survey Sampling. SAGE Publications. https://doi.org/10.4135/9781412984683","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Systematic Sampling Without Replacement — sys","text":"","code":"# Sort by REGION, DIVISION, and Pop_Tot, then take a sample puma_2023 |>   tidytable::arrange(Region, Division, Pop_Tot) |>   sys(n = 50, outall = FALSE) #> Frame size: 2462 #> Sample size: 50 #> Sampling interval (k): 49.24 #> Random start (r): 18.4339 #> # A tidytable: 50 × 27 #>    GEOID   Name  State Region Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <chr>   <chr> <chr> <fct>  <fct>      <dbl>            <dbl>            <dbl> #>  1 2300600 Andr… ME    North… New Eng…  112323             88.2             4.61 #>  2 2500904 Norf… MA    North… New Eng…  139589             64.4            12.8  #>  3 3401105 Monm… NJ    North… Middle …  100369             74.5             3.82 #>  4 3603002 Rock… NY    North… Middle …  109404             65.0             8.22 #>  5 3400903 Midd… NJ    North… Middle …  117567             32.0            14.3  #>  6 4201803 Alle… PA    North… Middle …  127233             88.2             3.32 #>  7 4203230 Phil… PA    North… Middle …  139415             68.4            11.0  #>  8 4201200 Cent… PA    North… Middle …  158041             83.5             3.21 #>  9 4201701 Pitt… PA    North… Middle …  196078             58.1            24.8  #> 10 1802401 Mari… IN    Midwe… East No…  109931             32.8            46.7  #> # ℹ 40 more rows #> # ℹ 19 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …  # Return full dataset with selection indicators puma_2023 |>   tidytable::arrange(Region, Division, Pop_Tot) |>   sys(n = 50, outall = TRUE) #> Frame size: 2462 #> Sample size: 50 #> Sampling interval (k): 49.24 #> Random start (r): 43.60074 #> # A tidytable: 2,462 × 28 #>    GEOID   Name  State Region Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <chr>   <chr> <chr> <fct>  <fct>      <dbl>            <dbl>            <dbl> #>  1 2500505 Worc… MA    North… New Eng…   99893             51.7            9.42  #>  2 2500903 Norf… MA    North… New Eng…  101322             54.4            6.06  #>  3 2500705 Esse… MA    North… New Eng…  104233             37.8           10.1   #>  4 0920902 West… CT    North… New Eng…  104909             80.9            1.97  #>  5 2501101 Plym… MA    North… New Eng…  105080             26.6           37.0   #>  6 2500603 Midd… MA    North… New Eng…  105224             80.4            3.56  #>  7 2500504 Worc… MA    North… New Eng…  105608             49.4           13.4   #>  8 3300602 Grea… NH    North… New Eng…  106658             88.9            0.991 #>  9 0920301 Nort… CT    North… New Eng…  107291             87.3            1.52  #> 10 2500606 Midd… MA    North… New Eng…  107565             74.7            1.73  #> # ℹ 2,452 more rows #> # ℹ 20 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys_pps.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a systematic PPS sample — sys_pps","title":"Select a systematic PPS sample — sys_pps","text":"Draws systematic sample size n. unit's probability selection proportional size measure.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys_pps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a systematic PPS sample — sys_pps","text":"","code":"sys_pps(frame, n, mos, outall = FALSE, curstrat = NULL)"},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys_pps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a systematic PPS sample — sys_pps","text":"frame input data frame function work . n sample size, parameter expects integer length 1.  function check n less equal number rows input frame. mos measure size, parameter expects character string indicate variable use measure size.  variable must exists frame non-missing non-negative numeric variable. outall Output records selected records.  outall TRUE, records return following variables created: SelectionIndicator, SamplingWeight, NumberHits, ExpectedHits.  outall FALSE, selected records return following variables created:  SamplingWeight, NumberHits, ExpectedHits. curstrat character variable specifies current strata, used assertion n == N test.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys_pps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a systematic PPS sample — sys_pps","text":"Returns object type tidytable contains weight, selection probability, number hits, etc plus original variables.","code":""},{"path":"https://rtiinternational.github.io/SampleSelectR/reference/sys_pps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a systematic PPS sample — sys_pps","text":"","code":"# PPS sample of 75 counties using Pop_Tot as the measure of size # Return only the sampled counties sys_pps(county_2023, mos = \"Pop_Tot\", n = 75, outall = FALSE) #> Frame size: 3144 #> Sample size: 75 #> Sampling interval (k): 4431834 #> Random start (r): 2881639 #> # A tidytable: 74 × 28 #>    GEOID Name    State Region Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <chr> <chr>   <chr> <fct>  <fct>      <dbl>            <dbl>            <dbl> #>  1 01089 Madiso… AL    South  East So…  397135             62.3            24.0  #>  2 04013 Marico… AZ    West   Mountain 4491987             53.4             5.49 #>  3 04019 Pima C… AZ    West   Mountain 1049947             51.2             3.29 #>  4 06001 Alamed… CA    West   Pacific  1651949             28.2             9.63 #>  5 06023 Humbol… CA    West   Pacific   135418             70.2             1.12 #>  6 06037 Los An… CA    West   Pacific  9848406             25.2             7.54 #>  7 06059 Orange… CA    West   Pacific  3164063             37.7             1.52 #>  8 06065 Rivers… CA    West   Pacific  2449909             32.0             6.12 #>  9 06071 San Be… CA    West   Pacific  2187816             25.6             7.62 #> 10 06075 San Fr… CA    West   Pacific   836321             37.5             4.81 #> # ℹ 64 more rows #> # ℹ 20 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …  # Return the full dataset with selection indicators sys_pps(county_2023, mos = \"Pop_Tot\", n = 75, outall = TRUE) #> Frame size: 3144 #> Sample size: 75 #> Sampling interval (k): 4431834 #> Random start (r): 3011580 #> # A tidytable: 3,144 × 29 #>    GEOID Name    State Region Division Pop_Tot Pop_Pct_White_NH Pop_Pct_Black_NH #>    <chr> <chr>   <chr> <fct>  <fct>      <dbl>            <dbl>            <dbl> #>  1 01001 Autaug… AL    South  East So…   59285             71.7            20.0  #>  2 01003 Baldwi… AL    South  East So…  239945             81.4             7.94 #>  3 01005 Barbou… AL    South  East So…   24757             43.7            46.9  #>  4 01007 Bibb C… AL    South  East So…   22152             73.7            20.7  #>  5 01009 Blount… AL    South  East So…   59292             85.0             1.26 #>  6 01011 Bulloc… AL    South  East So…   10157             21.1            71.2  #>  7 01013 Butler… AL    South  East So…   18807             50.7            44.7  #>  8 01015 Calhou… AL    South  East So…  116141             69.8            21.6  #>  9 01017 Chambe… AL    South  East So…   34450             53.9            39.7  #> 10 01019 Cherok… AL    South  East So…   25224             90.7             3.73 #> # ℹ 3,134 more rows #> # ℹ 21 more variables: Pop_Pct_AIAN_NH <dbl>, Pop_Pct_Asian_NH <dbl>, #> #   Pop_Pct_NHPI_NH <dbl>, Pop_Pct_Other_NH <dbl>, Pop_Pct_Hispanic <dbl>, #> #   HU_Tot <dbl>, HU_Pct_Occupied <dbl>, HU_Pct_Vacant <dbl>, #> #   Pop_Pct_0004 <dbl>, Pop_Pct_0509 <dbl>, Pop_Pct_1014 <dbl>, #> #   Pop_Pct_2544 <dbl>, Pop_Pct_4564 <dbl>, Pop_Pct_6574 <dbl>, #> #   Pop_Pct_75plus <dbl>, Pop_Pct_1517 <dbl>, Pop_Pct_1824 <dbl>, …"},{"path":"https://rtiinternational.github.io/SampleSelectR/news/index.html","id":"sampleselectr-100","dir":"Changelog","previous_headings":"","what":"SampleSelectR 1.0.0","title":"SampleSelectR 1.0.0","text":"Initial major version. Sampling methods include SRS, systematic, systematic PPS, Chromy’s PPS Sorting includes nest serpentine Allocation methods include proportional, power, Neyman, optimal Example data includes IPEDS, counties, PUMAs","code":""}]
